diff -urN usr/lib/python2.5/site-packages/vmc/contrib/axiom/_schema.py usr/lib/python2.5/site-packages/vmc/contrib/axiom/_schema.py
--- usr/lib/python2.5/site-packages/vmc/contrib/axiom/_schema.py	2009-02-24 18:06:52.000000000 +0100
+++ usr/lib/python2.5/site-packages/vmc/contrib/axiom/_schema.py	2009-02-28 11:25:24.000000000 +0100
@@ -28,7 +28,7 @@
 CREATE TABLE *DATABASE*.axiom_attributes (
     type_id INTEGER,
     row_offset INTEGER,
-    indexed BOOLEAN,
+    "indexed" BOOLEAN,
     sqltype VARCHAR,
     allow_none BOOLEAN,
     pythontype VARCHAR,
@@ -47,13 +47,13 @@
 HAS_SCHEMA_FEATURE = ("SELECT COUNT(oid) FROM *DATABASE*.sqlite_master "
                       "WHERE type = ? AND name = ?")
 
-IDENTIFYING_SCHEMA = ('SELECT indexed, sqltype, allow_none, attribute '
+IDENTIFYING_SCHEMA = ('SELECT "indexed", sqltype, allow_none, attribute '
                       'FROM *DATABASE*.axiom_attributes WHERE type_id = ? '
                       'ORDER BY row_offset')
 
 ADD_SCHEMA_ATTRIBUTE = (
     'INSERT INTO *DATABASE*.axiom_attributes '
-    '(type_id, row_offset, indexed, sqltype, allow_none, attribute, docstring, pythontype) '
+    '(type_id, row_offset, "indexed", sqltype, allow_none, attribute, docstring, pythontype) '
     'VALUES (?, ?, ?, ?, ?, ?, ?, ?)')
 
 ALL_TYPES = 'SELECT oid, module, typename, version FROM *DATABASE*.axiom_types'
@@ -61,7 +61,7 @@
 GET_GREATER_VERSIONS_OF_TYPE = ('SELECT version FROM *DATABASE*.axiom_types '
                                 'WHERE typename = ? AND version > ?')
 
-SCHEMA_FOR_TYPE = ('SELECT indexed, pythontype, attribute, docstring '
+SCHEMA_FOR_TYPE = ('SELECT "indexed", pythontype, attribute, docstring '
                    'FROM *DATABASE*.axiom_attributes '
                    'WHERE type_id = ?')
 
diff -urN usr/lib/python2.5/site-packages/vmc/utils/utilities.py usr/lib/python2.5/site-packages/vmc/utils/utilities.py
--- usr/lib/python2.5/site-packages/vmc/utils/utilities.py	2009-02-24 18:06:52.000000000 +0100
+++ usr/lib/python2.5/site-packages/vmc/utils/utilities.py	2009-02-28 11:26:51.000000000 +0100
@@ -80,11 +80,11 @@
         return None
 
     try:
-        try:
-            fileobj = open(path, 'r')
-        except IOError:
-            return None
+        fileobj = open(path, 'r')
+    except IOError:
+        return None
 
+    try:
         data = fileobj.read()
         return data
     finally:
@@ -92,8 +92,8 @@
 
 def save_file(path, data):
     """saves C{data} in C{path}"""
+    fileobj = open(path, 'w')
     try:
-        fileobj = open(path, 'w')
         fileobj.write(data)
     finally:
         fileobj.close()
diff -urN usr/share/vodafone-mobile-connect/plugins/os/arch.py usr/share/vodafone-mobile-connect/plugins/os/arch.py
--- usr/share/vodafone-mobile-connect/plugins/os/arch.py	1970-01-01 01:00:00.000000000 +0100
+++ usr/share/vodafone-mobile-connect/plugins/os/arch.py	2009-02-28 11:01:17.000000000 +0100
@@ -0,0 +1,72 @@
+# -*- coding: utf-8 -*-
+# Copyright (C) 2006-2007  Vodafone España, S.A.
+# Author:  Pablo Martí
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License along
+# with this program; if not, write to the Free Software Foundation, Inc.,
+# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+"""Arch OSPlugin"""
+__version__ = "$Rev: 1179 $"
+
+import re
+
+from twisted.python.procutils import which
+
+from vmc.common.oses import LinuxPlugin
+from vmc.utils.utilities import get_file_data
+
+arch_customization = {
+    'WVDIAL_CONN_SWITCH' : '--config',
+    'gksudo_name' : 'gksu',
+}
+
+class ArchBasedDistro(LinuxPlugin):
+    """
+    OSPlugin for Arch-based distros
+    """
+    os_name = re.compile("arch")
+    os_version = None
+    customization = arch_customization
+
+    def get_timezone(self):
+        timezone_re = re.compile('TIMEZONE="(?P<tzname>[\w/]+)"')
+        sysconf_clock_file = get_file_data('/etc/rc.conf')
+        search_dict = timezone_re.search(sysconf_clock_file).groupdict()
+        return search_dict['tzname']
+ 
+    def get_connection_args(self, dialer):
+        assert dialer.binary == 'wvdial'
+        
+        if not self.privileges_needed:
+            return [dialer.bin_path, self.abstraction['WVDIAL_CONN_SWITCH'],
+                    dialer.conf_path, 'connect']
+        
+        gksudo_name = self.abstraction['gksudo_name']
+        gksudo_path = which(gksudo_name)[0]
+        args = [dialer.bin_path, self.abstraction['WVDIAL_CONN_SWITCH'],
+                dialer.conf_path, 'connect']
+        return [gksudo_path, '-g --', " ".join(args)]
+    
+    def get_disconnection_args(self, dialer):
+        assert dialer.binary == 'wvdial'
+        
+        killall_path = which('killall')[0]
+        if not self.privileges_needed:
+            return [killall_path, 'pppd', 'wvdial']
+        
+        gksudo_name = self.abstraction['gksudo_name']
+        gksudo_path = which(gksudo_name)[0]
+        args = " ".join([killall_path, 'pppd', 'wvdial'])
+        return [gksudo_path, '-g --', args]
+
+arch = ArchBasedDistro()
diff -urN usr/share/vodafone-mobile-connect/plugins/os/gentoo.py usr/share/vodafone-mobile-connect/plugins/os/gentoo.py
--- usr/share/vodafone-mobile-connect/plugins/os/gentoo.py	1970-01-01 01:00:00.000000000 +0100
+++ usr/share/vodafone-mobile-connect/plugins/os/gentoo.py	2009-02-28 11:23:25.000000000 +0100
@@ -0,0 +1,77 @@
+# -*- coding: utf-8 -*-
+# Copyright (C) 2006-2007  Vodafone España, S.A.
+# Author:  Pablo Martí
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License along
+# with this program; if not, write to the Free Software Foundation, Inc.,
+# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+"""Gentoo OSPlugin"""
+__version__ = "$Rev: 1179 $"
+
+import re
+
+from twisted.python.procutils import which
+
+from vmc.common.oses import LinuxPlugin
+from vmc.utils.utilities import get_file_data
+
+gentoo_customization = {
+    'WVDIAL_CONN_SWITCH' : '--config',
+    'gksudo_name' : 'gksu',
+}
+
+class GentooBasedDistro(LinuxPlugin):
+    """
+    OSPlugin for Gentoo-based distros
+    """
+    os_name = re.compile("Gentoo")
+    os_version = None
+    customization = gentoo_customization
+
+    def get_timezone(self):
+        try:
+            timezone_re = re.compile('TIMEZONE="(?P<tzname>[\w/]+)"')
+            sysconf_clock_file = get_file_data('/etc/conf.d/clock')
+            search_dict = timezone_re.search(sysconf_clock_file).groupdict()
+            return search_dict['tzname']
+        except OSError:
+            # For Funtoo, Sabayon or wahtever, which uses OpenRC
+            return super(GentooBasedDistro, self).get_timezone()
+ 
+    def get_connection_args(self, dialer):
+        assert dialer.binary == 'wvdial'
+        
+        if not self.privileges_needed:
+            return [dialer.bin_path, self.abstraction['WVDIAL_CONN_SWITCH'],
+                    dialer.conf_path, 'connect']
+        
+        gksudo_name = self.abstraction['gksudo_name']
+        gksudo_path = which(gksudo_name)[0]
+        args = [dialer.bin_path, self.abstraction['WVDIAL_CONN_SWITCH'],
+                dialer.conf_path, 'connect']
+        return [gksudo_path, '-g --', " ".join(args)]
+    
+    def get_disconnection_args(self, dialer):
+        assert dialer.binary == 'wvdial'
+        
+        killall_path = which('killall')[0]
+        if not self.privileges_needed:
+            return [killall_path, 'pppd', 'wvdial']
+        
+        gksudo_name = self.abstraction['gksudo_name']
+        gksudo_path = which(gksudo_name)[0]
+        args = " ".join([killall_path, 'pppd', 'wvdial'])
+        return [gksudo_path, '-g --', args]
+
+gentoo = GentooBasedDistro()
+# XXX: Is there lsb info for Sabayon?
